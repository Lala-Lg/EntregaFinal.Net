@page "/listadoUsuarios"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Web
@using SGE.Aplicacion.Servicios
@inject CasoDeUsoListarUsuarios CasoDeUsoListarUsuarios
@inject NavigationManager NavigationManager
@inject CasoDeUsoEliminarUsuario CasoDeUsoEliminarUsuario

<PageTitle>ListarUsuarios</PageTitle>

<h1>Listado de Usuarios</h1>

<p>A continuación se visualiza el listado de los usuarios.</p>

@if (_usuarios == null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Correo electrónico</th>
                <th>Permisos</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var usuario in _usuarios)
            {
                <tr>
                    <td>@usuario.Id</td>
                    <td>@usuario.Nombre</td>
                    <td>@usuario.Apellido</td>
                    <td>@usuario.CorreoElectronico</td>
                    <td>@usuario.ListaPermisos</td>
                </tr>
                <td>
                    <button class="btn btn-primary" @onclick="()=>ModificarUsuario(usuario)">
                        <span class="oi oi-pencil"></span>
                    </button>
                </td>
                <td>
                    <button class="btn btn-danger" @onclick="()=>ConfirmarEliminacion(usuario)">
                        <span class="oi oi-trash"></span>
                    </button>
                </td>
            }
        </tbody>
    </table>
}
<div class="container">
     <button @onclick="IrAagregarUsuario" class="btn btn-primary">Agregar Usuario</button>
    <button @onclick="VolverHome" class="btn btn-primary">Home</button>
</div>
<DialogoConfirmacion @ref="dialogo" OnConfirmado="HandleConfirmarEliminacion" />

@code {
    List<Usuario> _usuarios = new List<Usuario>();

    protected override void OnInitialized()
    {
        _usuarios = CasoDeUsoListarUsuarios.Ejecutar();
    }

    private DialogoConfirmacion dialogo; // Declaración de la referencia dialogo

    private Usuario? _usuarioEliminar = null;

    private void ConfirmarEliminacion(Usuario usuario)
    {
        _usuarioEliminar = usuario;
        dialogo.Mostrar($"¿Desea eliminar el usuario {usuario.Id}?");
    }
 
    private async Task HandleConfirmarEliminacion(bool confirmado)
    {
        if (confirmado && _usuarioEliminar != null)
        {
            await EliminarUsuarioConfirmado(confirmado);
        }
    }
    private async Task EliminarUsuarioConfirmado(bool confirmado)
    {
        if (confirmado && _usuarioEliminar != null)
        {
            CasoDeUsoEliminarUsuario.Ejecutar(_usuarioEliminar);
            _usuarios = CasoDeUsoListarUsuarios.Ejecutar(); // Actualiza la lista
            _usuarioEliminar = null; // Limpiar el usuario seleccionado
        }
    }

    private void ModificarUsuario(Usuario usuario)
    {
        NavigationManager.NavigateTo($"usuario/editar/{usuario.Id}");
    }

     private void IrAagregarUsuario()
    {
        NavigationManager.NavigateTo("/AgregarExpediente");
    }
    private void VolverHome()
    {
        NavigationManager.NavigateTo("/"); // Vuelve al Home
    }
}